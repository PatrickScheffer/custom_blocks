<?php
/**
 * Implements hook_permission().
 */
function custom_blocks_permission() {
  return array(
    'administer custom blocks' => array(
      'title' => t('Administer Custom Blocks'),
      'description' => t('Allow users to configure the custom blocks.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function custom_blocks_menu() {
  $items = array();

  $items['admin/config/content/custom_blocks'] = array(
    'title' => 'Custom Blocks',
    'description' => 'Manage Custom Blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_blocks_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer custom blocks'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

// on page load, run through local data once to dismiss pending remove requests
$local_data = variable_get('custom_blocks_local_data', array());
if(count($local_data)) {
  foreach($local_data as $block_id => $block_data) {
    if(isset($block_data['remove'])) unset($local_data[ $block_id ]['remove']);
  }
  variable_set('custom_blocks_local_data', $local_data);
}

/*
 * Implements hook_form()
 *
 * Var custom_blocks_data contains default (feature exported) data
 * Var custom_blocks_local_data contains local stored data and overwrites default data on save
 * On reset (e.g. kraftwagen update), however, the custom_blocks_local_data will be overwritten by custom_blocks_data
 */
function custom_blocks_form() {
  // get default data, use local data if exists
  $custom_blocks_data = variable_get('custom_blocks_data', array());
  if(count(variable_get('custom_blocks_local_data', array()))) { 
    $custom_blocks_data = variable_get('custom_blocks_local_data');
    variable_set('custom_blocks_data', $custom_blocks_data); // overwrite default data
  }

  $form = array();
  $form['#tree'] = TRUE;

  // wrapper
  $form['custom_blocks'] = array(
  	'#type' => 'fieldset',
  	'#prefix' => '<div id="blocks-wrapper">',
  	'#suffix' => '</div>',
  );

  // add button
  $form['custom_blocks']['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add Block'),
    '#submit' => array('custom_blocks_add_block'),
    '#ajax' => array(
      'callback' => 'custom_blocks_blocks_wrapper_callback',
      'wrapper' => 'blocks-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

	// loop through saved data and create block forms
  foreach($custom_blocks_data as $block_id => $block_data) {
  	$form['custom_blocks'][ $block_id ] = array(
			'#type' => 'fieldset',
			'#title' => t('Block '.$block_id),
      '#prefix' => '<div id="block-'.$block_id.'">',
      '#suffix' => '</div>',
			'#collapsible' => TRUE,
		);

    $form['custom_blocks'][ $block_id ]['actions'] = array(
      '#type' => 'fieldset',
    );

    $form['custom_blocks'][ $block_id ]['actions']['add_textfield'] = array(
      '#type' => 'submit',
      '#name' => 'block-'.$block_id.'-textfield',
      '#value' => t('Add Textfield'),
      '#submit' => array('custom_blocks_add_textfield'),
      '#ajax' => array(
        'callback' => 'custom_blocks_block_callback',
        'wrapper' => 'block-'.$block_id.'-elements',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    $form['custom_blocks'][ $block_id ]['elements'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="block-'.$block_id.'-elements">',
      '#suffix' => '</div>',
    );

		// textfield for title
    if(isset($block_data['textfield']) && count($block_data['textfield'])) {
      foreach($block_data['textfield'] as $tf_id => $textfield) {
    		$form['custom_blocks'][ $block_id ]['elements']['textfield'][ $tf_id ] = array(
    			'#type' => 'textfield',
    			'#title' => t('Textfield '.$tf_id),
    			'#default_value' => $textfield,
    		);
      }
    }

		// text_format for content
		/*$content = $block_data['content'];
		if(!isset($content['value'])) $content['value'] = $content;
		$form['custom_blocks'][ $block_id ]['content'] = array(
			'#type' => 'text_format',
			'#title' => t('Block Content'),
			'#default_value' => $content['value'],
			'#format' => 'full_html',
		);*/

    // remove block wrapper
    $form['custom_blocks'][ $block_id ]['remove_wrapper'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="remove-block-'.$block_id.'">',
      '#suffix' => '</div>',
    );

    if(isset($block_data['remove']) && $block_data['remove'] == TRUE) {
		  // remove button confirm
      $form['custom_blocks'][ $block_id ]['remove_wrapper']['confirm_remove'] = array(
        '#type' => 'submit',
        '#value' => t('Yes'),
        '#submit' => array('custom_blocks_remove_block_confirm'),
        '#prefix' => t('Are you sure?&nbsp;&nbsp;'),
        '#ajax' => array(
          'callback' => 'custom_blocks_blocks_wrapper_callback',
          'wrapper' => 'blocks-wrapper',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );

      // remove button cancel
      $form['custom_blocks'][ $block_id ]['remove_wrapper']['cancel_remove'] = array(
        '#type' => 'submit',
        '#value' => t('No'),
        '#submit' => array('custom_blocks_remove_block_cancel'),
        '#ajax' => array(
          'callback' => 'custom_blocks_remove_block_callback',
          'wrapper' => 'remove-block-'.$block_id,
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    } else {
      // remove button
      $form['custom_blocks'][ $block_id ]['remove_wrapper']['remove'] = array(
        '#type' => 'submit',
        '#value' => t('Remove Block '.$block_id),
        '#submit' => array('custom_blocks_remove_block'),
        '#ajax' => array(
          'callback' => 'custom_blocks_remove_block_callback',
          'wrapper' => 'remove-block-'.$block_id,
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    }
  }

  // submit button
  $form['submit'] = array(
  	'#type' => 'submit',
  	'#value' => t('Save'),
  );

  return $form;
}

/*
 * AJAX Callback for add and confirm remove button
 */
function custom_blocks_blocks_wrapper_callback($form, $form_state) {
  return $form['custom_blocks'];
}

/*
 * AJAX Callback for add and remove elements buttons
 */
function custom_blocks_block_callback($form, $form_state) {
  $block_id = $form_state['triggering_element']['#parents'][1];
  return $form['custom_blocks'][ $block_id ]['elements'];
}

/*
 * AJAX Callback for remove and cancel remove button
 */
function custom_blocks_remove_block_callback($form, $form_state) {
  $block_id = $form_state['triggering_element']['#parents'][1];
  return $form['custom_blocks'][ $block_id ]['remove_wrapper'];
}

/*
 * Function called by add 
 * Store data in local and in default array in case the user wants to export this saved data
 */
function custom_blocks_add_block($form, &$form_state) {
	$custom_blocks_data = variable_get('custom_blocks_data', '');
	$custom_blocks_data[] = array('title' => '', 'content' => '');
	variable_set('custom_blocks_data', $custom_blocks_data);
	variable_set('custom_blocks_local_data', $custom_blocks_data);

	$form_state['rebuild'] = TRUE;
}

/*
 * Function called by remove button
 * Get block id, set remove var true to summon confirm and cancel buttons
 */
function custom_blocks_remove_block($form, &$form_state) {
  $block_id = $form_state['triggering_element']['#parents'][1];
  $custom_blocks_data = variable_get('custom_blocks_local_data', array());
  $custom_blocks_data[ $block_id ]['remove'] = TRUE;
  variable_set('custom_blocks_local_data', $custom_blocks_data);

  $form_state['rebuild'] = TRUE;
}

/*
 * Function called by remove button cancel
 * Get block id, unset the remove var and update local data
 */
function custom_blocks_remove_block_cancel($form, &$form_state) {
  $block_id = $form_state['triggering_element']['#parents'][1];
  $custom_blocks_data = variable_get('custom_blocks_local_data', array());
  unset($custom_blocks_data[ $block_id ]['remove']);
  variable_set('custom_blocks_local_data', $custom_blocks_data);

  $form_state['rebuild'] = TRUE;
}

/*
 * Function called by remove button confirm
 * Get block id, remove block and store data in local and default array
 */
function custom_blocks_remove_block_confirm($form, &$form_state) {
  $block_id = $form_state['triggering_element']['#parents'][1];
	$custom_blocks_data = variable_get('custom_blocks_data', array());
	unset($custom_blocks_data[ $block_id ]);
	variable_set('custom_blocks_data', $custom_blocks_data);
	variable_set('custom_blocks_local_data', $custom_blocks_data);

	$form_state['rebuild'] = TRUE;
}

/*
 * Function called by add textfield
 * Store data in local and in default array in case the user wants to export this saved data
 */
function custom_blocks_add_textfield($form, &$form_state) {
  $block_id = $form_state['triggering_element']['#parents'][1];
  $custom_blocks_data = variable_get('custom_blocks_data', '');
  $custom_blocks_data[ $block_id ]['textfield'][] = '';
  variable_set('custom_blocks_data', $custom_blocks_data);
  variable_set('custom_blocks_local_data', $custom_blocks_data);

  $form_state['rebuild'] = TRUE;
}

/*
 * Form submit
 * Get saved data, unset unwanted elements and store data both in local and default array
 */
function custom_blocks_form_submit($form, &$form_state) {
	$custom_blocks_data = variable_get('custom_blocks_data', array());
	unset($form_state['values']['custom_blocks']['add']);
	foreach($form_state['values']['custom_blocks'] as $block_id => $block_data) {
		unset($block_data['remove']);
		$custom_blocks_data[ $block_id ] = $block_data;
	}
	variable_set('custom_blocks_data', $custom_blocks_data);
	variable_set('custom_blocks_local_data', $custom_blocks_data);
}

/**
 * Implementation of hook_block_info()
 * Get saved data, loop through blocks and create block info
 */
function custom_blocks_block_info() {
	$blocks = array();
	$custom_blocks_data = variable_get('custom_blocks_data', array());

	foreach($custom_blocks_data as $block_id => $block_data) {
		$title = $block_data['title'];
		if(empty($title)) $title = $block_id;

	  $blocks['custom_block_'.$block_id] = array(
	    'info' => t('Custom Block: '.$title),
	  );
	}
  return $blocks;
}


/**
 * Implementation of hook_block_view()
 * Get saved data, explode $delta to retrieve block id and set the block title and content
 */
function custom_blocks_block_view($delta = '') {
  $block = array();
  $custom_blocks_data = variable_get('custom_blocks_data', array());
  $tmp = explode('_', $delta);
  $block_id = $tmp[ count($tmp)-1 ];

  if(isset($custom_blocks_data[ $block_id ])) {
  	$title = $custom_blocks_data[ $block_id ]['title'];
  	$content = $custom_blocks_data[ $block_id ]['content'];
  	if(!isset($content['value'])) $content['value'] = $content;

  	$block['subject'] = $title;
    $block['content'] =  $content['value'];
    $block['cache'] = DRUPAL_CACHE_GLOBAL;
  }

  return $block;
}

/*
// Maybe for later
function _activate_block($module, $block, $region, $theme, $pages, $visibility) {
  //drupal_set_message("Activating block $module:$block\n");
  db_merge('block')
  ->key(array('theme' => $theme, 'delta' => $block, 'module' => $module))
  ->fields(array(
    'region' => ($region == BLOCK_REGION_NONE ? '' : $region),
    'pages' => trim($pages),
    'status' => (int) ($region != BLOCK_REGION_NONE),
    'visibility' => $visibility,
  ))
  ->execute();
}
*/